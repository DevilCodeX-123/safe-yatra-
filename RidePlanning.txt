import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { User } from "@/entities/User";
import { Ride } from "@/entities/Ride";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import { MapPin, ArrowRight, Zap, Heart, Activity, Volume2 } from "lucide-react";
import { motion } from "framer-motion";

const translations = {
  hindi: {
    title: "अपनी यात्रा की योजना बनाएं",
    source: "कहाँ से",
    destination: "कहाँ",
    selectRoute: "मार्ग प्राथमिकता चुनें",
    fastest: "सबसे तेज़",
    comfortable: "आरामदायक",
    fitness: "फ़िटनेस",
    quiet: "शांत",
    findRoute: "मार्ग खोजें"
  },
  english: {
    title: "Plan Your Journey",
    source: "From",
    destination: "To",
    selectRoute: "Select Route Preference",
    fastest: "Fastest",
    comfortable: "Comfortable",
    fitness: "Fitness",
    quiet: "Quiet",
    findRoute: "Find Route"
  },
  marathi: {
    title: "तुमच्या प्रवासाची योजना करा",
    source: "कुठून",
    destination: "कुठे",
    selectRoute: "मार्ग प्राधान्य निवडा",
    fastest: "सर्वात वेगवान",
    comfortable: "आरामदायक",
    fitness: "फिटनेस",
    quiet: "शांत",
    findRoute: "मार्ग शोधा"
  },
  bengali: {
    title: "আপনার যাত্রার পরিকল্পনা করুন",
    source: "কোথা থেকে",
    destination: "কোথায়",
    selectRoute: "রুট পছন্দ নির্বাচন করুন",
    fastest: "দ্রুততম",
    comfortable: "আরামদায়ক",
    fitness: "ফিটনেস",
    quiet: "শান্ত",
    findRoute: "রুট খুঁজুন"
  },
  tamil: {
    title: "உங்கள் பயணத்தைத் திட்டமிடுங்கள்",
    source: "எங்கிருந்து",
    destination: "எங்கே",
    selectRoute: "வழி விருப்பத்தைத் தேர்ந்தெடுக்கவும்",
    fastest: "விரைவான",
    comfortable: "வசதியான",
    fitness: "உடற்பயிற்சி",
    quiet: "அமைதியான",
    findRoute: "வழியைக் கண்டறியவும்"
  }
};

const routeOptions = [
  { 
    id: "fastest", 
    icon: Zap, 
    color: "blue",
    labels: { hindi: "सबसे तेज़", english: "Fastest", marathi: "सर्वात वेगवान", bengali: "দ্রুততম", tamil: "விரைவான" }
  },
  { 
    id: "comfortable", 
    icon: Heart, 
    color: "green",
    labels: { hindi: "आरामदायक", english: "Comfortable", marathi: "आरामदायक", bengali: "আরামদায়ক", tamil: "வசதியான" }
  },
  { 
    id: "fitness", 
    icon: Activity, 
    color: "orange",
    labels: { hindi: "फ़िटनेस", english: "Fitness", marathi: "फिटनेस", bengali: "ফিটনেস", tamil: "உடற்பயிற்சி" }
  },
  { 
    id: "quiet", 
    icon: Volume2, 
    color: "purple",
    labels: { hindi: "शांत", english: "Quiet", marathi: "शांत", bengali: "শান্ত", tamil: "அமைதியான" }
  }
];

export default function RidePlanning() {
  const [user, setUser] = useState(null);
  const [darkMode, setDarkMode] = useState(false);
  const [source, setSource] = useState("");
  const [destination, setDestination] = useState("");
  const [selectedRoute, setSelectedRoute] = useState("fastest");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    loadUser();
    const params = new URLSearchParams(window.location.search);
    const srcParam = params.get("source");
    const destParam = params.get("destination");
    if (srcParam) setSource(srcParam);
    if (destParam) setDestination(destParam);
  }, []);

  const loadUser = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
      setDarkMode(userData.dark_mode || false);
    } catch (error) {
      navigate(createPageUrl("LanguageSelection"));
    }
  };

  const handleFindRoute = async () => {
    if (!source || !destination) return;
    
    setIsLoading(true);
    try {
      const ride = await Ride.create({
        source,
        destination,
        route_preference: selectedRoute,
        status: "planned",
        start_time: new Date().toISOString()
      });
      
      navigate(createPageUrl("ActiveRide") + `?rideId=${ride.id}`);
    } catch (error) {
      console.error("Error creating ride:", error);
    }
    setIsLoading(false);
  };

  const lang = user?.preferred_language || "hindi";
  const t = translations[lang];

  return (
    <div className={`min-h-screen py-8 px-4 ${darkMode ? 'bg-black' : 'bg-gray-50'}`}>
      <div className="max-w-2xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <h1 className={`text-3xl font-bold mb-8 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
            {t.title}
          </h1>

          <Card className={`p-6 mb-6 ${darkMode ? 'bg-gray-900 border-gray-800' : ''}`}>
            <div className="space-y-4">
              <div>
                <div className="flex items-center gap-2 mb-2">
                  <MapPin className={`w-5 h-5 ${darkMode ? 'text-green-400' : 'text-green-600'}`} />
                  <label className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    {t.source}
                  </label>
                </div>
                <Input
                  value={source}
                  onChange={(e) => setSource(e.target.value)}
                  placeholder={t.source}
                  className={`h-12 ${darkMode ? 'bg-gray-800 border-gray-700 text-white' : ''}`}
                />
              </div>

              <div className="flex justify-center">
                <ArrowRight className={`w-6 h-6 ${darkMode ? 'text-gray-600' : 'text-gray-400'}`} />
              </div>

              <div>
                <div className="flex items-center gap-2 mb-2">
                  <MapPin className={`w-5 h-5 ${darkMode ? 'text-red-400' : 'text-red-600'}`} />
                  <label className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    {t.destination}
                  </label>
                </div>
                <Input
                  value={destination}
                  onChange={(e) => setDestination(e.target.value)}
                  placeholder={t.destination}
                  className={`h-12 ${darkMode ? 'bg-gray-800 border-gray-700 text-white' : ''}`}
                />
              </div>
            </div>
          </Card>

          <Card className={`p-6 mb-6 ${darkMode ? 'bg-gray-900 border-gray-800' : ''}`}>
            <h3 className={`font-semibold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
              {t.selectRoute}
            </h3>
            <div className="grid grid-cols-2 gap-3">
              {routeOptions.map((option) => (
                <motion.button
                  key={option.id}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setSelectedRoute(option.id)}
                  className={`p-4 rounded-xl border-2 transition-all ${
                    selectedRoute === option.id
                      ? darkMode
                        ? `border-${option.color}-500 bg-${option.color}-900/20`
                        : `border-${option.color}-500 bg-${option.color}-50`
                      : darkMode
                        ? 'border-gray-700 bg-gray-800 hover:bg-gray-700'
                        : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <option.icon className={`w-6 h-6 mx-auto mb-2 ${
                    selectedRoute === option.id
                      ? `text-${option.color}-500`
                      : darkMode ? 'text-gray-400' : 'text-gray-600'
                  }`} />
                  <p className={`text-sm font-medium text-center ${
                    selectedRoute === option.id
                      ? darkMode ? 'text-white' : 'text-gray-900'
                      : darkMode ? 'text-gray-400' : 'text-gray-600'
                  }`}>
                    {option.labels[lang]}
                  </p>
                </motion.button>
              ))}
            </div>
          </Card>

          <Button
            onClick={handleFindRoute}
            disabled={!source || !destination || isLoading}
            className={`w-full h-14 text-lg font-semibold ${
              darkMode
                ? 'bg-blue-600 hover:bg-blue-700'
                : 'bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600'
            }`}
          >
            {isLoading ? "Loading..." : t.findRoute}
          </Button>
        </motion.div>
      </div>
    </div>
  );
}