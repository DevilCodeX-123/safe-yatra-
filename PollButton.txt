import React, { useState } from "react";
import { Poll } from "@/entities/Poll";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { AlertCircle, MessageSquare, Plus, X } from "lucide-react";

const translations = {
  hindi: {
    raiseConcern: "चिंता व्यक्त करें",
    quickPoll: "त्वरित चिंताएं",
    eveTeasing: "छेड़छाड़",
    fighting: "लड़ाई",
    abusing: "गाली-गलौज",
    drunkDriver: "शराबी चालक",
    customPoll: "कस्टम पोल",
    customConcern: "अपनी चिंता लिखें",
    pollQuestion: "पोल प्रश्न",
    addOption: "विकल्प जोड़ें",
    submit: "सबमिट करें",
    submitted: "धन्यवाद! चिंता दर्ज की गई।"
  },
  english: {
    raiseConcern: "Raise Concern",
    quickPoll: "Quick Concerns",
    eveTeasing: "Eve Teasing",
    fighting: "Fighting",
    abusing: "Abusing",
    drunkDriver: "Drunk Driver",
    customPoll: "Custom Poll",
    customConcern: "Describe your concern",
    pollQuestion: "Poll Question",
    addOption: "Add Option",
    submit: "Submit",
    submitted: "Thank you! Concern recorded."
  },
  marathi: {
    raiseConcern: "चिंता व्यक्त करा",
    quickPoll: "द्रुत चिंता",
    eveTeasing: "छेडछाड",
    fighting: "भांडण",
    abusing: "शिवीगाळ",
    drunkDriver: "दारूच्या नशेत चालक",
    customPoll: "सानुकूल पोल",
    customConcern: "तुमची चिंता लिहा",
    pollQuestion: "पोल प्रश्न",
    addOption: "पर्याय जोडा",
    submit: "सबमिट करा",
    submitted: "धन्यवाद! चिंता नोंदवली."
  },
  bengali: {
    raiseConcern: "উদ্বেগ প্রকাশ করুন",
    quickPoll: "দ্রুত উদ্বেগ",
    eveTeasing: "ইভ টিজিং",
    fighting: "মারামারি",
    abusing: "গালিগালাজ",
    drunkDriver: "মাতাল চালক",
    customPoll: "কাস্টম পোল",
    customConcern: "আপনার উদ্বেগ বর্ণনা করুন",
    pollQuestion: "পোল প্রশ্ন",
    addOption: "বিকল্প যোগ করুন",
    submit: "জমা দিন",
    submitted: "ধন্যবাদ! উদ্বেগ রেকর্ড করা হয়েছে।"
  },
  tamil: {
    raiseConcern: "கவலையை எழுப்பவும்",
    quickPoll: "விரைவு கவலைகள்",
    eveTeasing: "தொல்லை",
    fighting: "சண்டை",
    abusing: "திட்டுதல்",
    drunkDriver: "குடிபோதையில் ஓட்டுநர்",
    customPoll: "தனிப்பயன் வாக்கெடுப்பு",
    customConcern: "உங்கள் கவலையை விவரிக்கவும்",
    pollQuestion: "வாக்கெடுப்பு கேள்வி",
    addOption: "விருப்பத்தைச் சேர்க்கவும்",
    submit: "சமர்ப்பிக்கவும்",
    submitted: "நன்றி! கவலை பதிவு செய்யப்பட்டது."
  }
};

const quickConcerns = ["eve_teasing", "fighting", "abusing", "drunk_driver"];

export default function PollButton({ rideId, darkMode, lang }) {
  const [showDialog, setShowDialog] = useState(false);
  const [selectedConcerns, setSelectedConcerns] = useState([]);
  const [customConcern, setCustomConcern] = useState("");
  const [pollQuestion, setPollQuestion] = useState("");
  const [pollOptions, setPollOptions] = useState([""]);
  const [submitted, setSubmitted] = useState(false);

  const t = translations[lang] || translations.hindi;

  const concernLabels = {
    eve_teasing: t.eveTeasing,
    fighting: t.fighting,
    abusing: t.abusing,
    drunk_driver: t.drunkDriver
  };

  const toggleConcern = (concern) => {
    if (selectedConcerns.includes(concern)) {
      setSelectedConcerns(selectedConcerns.filter(c => c !== concern));
    } else {
      setSelectedConcerns([...selectedConcerns, concern]);
    }
  };

  const addPollOption = () => {
    setPollOptions([...pollOptions, ""]);
  };

  const updatePollOption = (index, value) => {
    const newOptions = [...pollOptions];
    newOptions[index] = value;
    setPollOptions(newOptions);
  };

  const removePollOption = (index) => {
    setPollOptions(pollOptions.filter((_, i) => i !== index));
  };

  const handleSubmit = async () => {
    try {
      for (const concern of selectedConcerns) {
        await Poll.create({
          ride_id: rideId,
          concern_type: concern,
          location: "Current Location",
          timestamp: new Date().toISOString(),
          status: "active"
        });
      }

      if (customConcern || pollQuestion) {
        await Poll.create({
          ride_id: rideId,
          concern_type: "custom",
          custom_concern: customConcern,
          custom_poll_question: pollQuestion,
          custom_poll_options: pollOptions.filter(opt => opt.trim() !== ""),
          location: "Current Location",
          timestamp: new Date().toISOString(),
          status: "active"
        });
      }

      setSubmitted(true);
      setTimeout(() => {
        setShowDialog(false);
        setSubmitted(false);
        setSelectedConcerns([]);
        setCustomConcern("");
        setPollQuestion("");
        setPollOptions([""]);
      }, 2000);
    } catch (error) {
      console.error("Error submitting poll:", error);
    }
  };

  return (
    <>
      <Button
        onClick={() => setShowDialog(true)}
        variant="outline"
        size="sm"
        className={`${darkMode ? 'border-gray-700 text-white hover:bg-gray-800' : ''}`}
      >
        <AlertCircle className="w-4 h-4 mr-2" />
        {t.raiseConcern}
      </Button>

      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogContent className={`max-w-lg max-h-[90vh] overflow-y-auto ${
          darkMode ? 'bg-gray-900 border-gray-800' : ''
        }`}>
          <DialogHeader>
            <DialogTitle className={darkMode ? 'text-white' : ''}>
              {t.raiseConcern}
            </DialogTitle>
          </DialogHeader>

          {submitted ? (
            <div className="text-center py-8">
              <MessageSquare className={`w-16 h-16 mx-auto mb-4 ${
                darkMode ? 'text-green-400' : 'text-green-500'
              }`} />
              <p className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                {t.submitted}
              </p>
            </div>
          ) : (
            <div className="space-y-6">
              <div>
                <Label className={`mb-3 block ${darkMode ? 'text-white' : ''}`}>
                  {t.quickPoll}
                </Label>
                <div className="grid grid-cols-2 gap-2">
                  {quickConcerns.map((concern) => (
                    <Button
                      key={concern}
                      type="button"
                      variant={selectedConcerns.includes(concern) ? "default" : "outline"}
                      size="sm"
                      onClick={() => toggleConcern(concern)}
                      className={`${
                        selectedConcerns.includes(concern)
                          ? darkMode ? 'bg-red-600 hover:bg-red-700' : 'bg-red-500 hover:bg-red-600'
                          : darkMode ? 'border-gray-700 text-white hover:bg-gray-800' : ''
                      }`}
                    >
                      {concernLabels[concern]}
                    </Button>
                  ))}
                </div>
              </div>

              <div>
                <Label className={`mb-2 block ${darkMode ? 'text-white' : ''}`}>
                  {t.customPoll}
                </Label>
                <Textarea
                  value={customConcern}
                  onChange={(e) => setCustomConcern(e.target.value)}
                  placeholder={t.customConcern}
                  className={`mb-3 ${darkMode ? 'bg-gray-800 border-gray-700 text-white' : ''}`}
                />
                
                <Input
                  value={pollQuestion}
                  onChange={(e) => setPollQuestion(e.target.value)}
                  placeholder={t.pollQuestion}
                  className={`mb-3 ${darkMode ? 'bg-gray-800 border-gray-700 text-white' : ''}`}
                />

                <div className="space-y-2">
                  {pollOptions.map((option, idx) => (
                    <div key={idx} className="flex gap-2">
                      <Input
                        value={option}
                        onChange={(e) => updatePollOption(idx, e.target.value)}
                        placeholder={`Option ${idx + 1}`}
                        className={darkMode ? 'bg-gray-800 border-gray-700 text-white' : ''}
                      />
                      {pollOptions.length > 1 && (
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => removePollOption(idx)}
                          className={darkMode ? 'text-white hover:bg-gray-800' : ''}
                        >
                          <X className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                  ))}
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={addPollOption}
                    className={`w-full ${darkMode ? 'border-gray-700 text-white hover:bg-gray-800' : ''}`}
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    {t.addOption}
                  </Button>
                </div>
              </div>

              <Button
                onClick={handleSubmit}
                disabled={selectedConcerns.length === 0 && !customConcern && !pollQuestion}
                className={`w-full ${
                  darkMode ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'
                }`}
              >
                {t.submit}
              </Button>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
}
